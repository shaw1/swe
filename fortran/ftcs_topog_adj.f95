!        Generated by TAPENADE     (INRIA, Ecuador team)
!  Tapenade 3.10 (r5717) - 30 Jul 2015 16:03
!
!  Differentiation of ftcs in reverse (adjoint) mode:
!   gradient     of useful results: m n phi
!   with respect to varying inputs: m n m0 phi0 n0 phi
!   RW status of diff variables: m:in-out n:in-out m0:out phi0:out
!                n0:out phi:in-out
SUBROUTINE FTCS_TOPOG_ADJ(m0, m0b, n0, n0b, phi0, phi0b, mb, nb, phib&
& , h, f, g, dx, dt, k, length)
  ! This subroutine is the adjoint model of the discrete shallow
  ! water model from ftcs_topog.f95 as generated by Tapenade 3.10.
  !
  ! Inputs:
  !     m0, n0, phi0, md, nd, phid, f, k, dx, dt
  !
  !     The adjoint input variables are md, nd, phid
  !
  ! Output:
  !     Adjoint output variables m0d, n0d, phi0d
  !
  ! Author:             Tapenade 3.10
  ! Edited By:          Jeremy Shaw
  ! Institution:        Portland State University
  ! Date Created:       Spring 2016
  ! Last Modified Date: 10 November 2016
  IMPLICIT NONE
  INTEGER, INTENT(IN) :: length
  DOUBLE PRECISION, DIMENSION(length), INTENT(IN) :: m0
  DOUBLE PRECISION, DIMENSION(length), intent(out) :: m0b
  DOUBLE PRECISION, DIMENSION(length), INTENT(IN) :: n0
  DOUBLE PRECISION, DIMENSION(length), intent(out) :: n0b
  DOUBLE PRECISION, DIMENSION(length), INTENT(IN) :: phi0
  DOUBLE PRECISION, DIMENSION(length), intent(out) :: phi0b
  DOUBLE PRECISION, DIMENSION(length), intent(in) :: mb
  DOUBLE PRECISION, DIMENSION(length), intent(in) :: nb
  DOUBLE PRECISION, DIMENSION(length), intent(in) :: phib
  DOUBLE PRECISION, DIMENSION(length), INTENT(IN) :: h
  DOUBLE PRECISION, INTENT(IN) :: g
  DOUBLE PRECISION, INTENT(IN) :: f
  DOUBLE PRECISION, INTENT(IN) :: k
  DOUBLE PRECISION, INTENT(IN) :: dx
  DOUBLE PRECISION, INTENT(IN) :: dt
  INTEGER :: j
  DOUBLE PRECISION :: coeff1
  DOUBLE PRECISION :: coeff2
  DOUBLE PRECISION :: coeff3
  DOUBLE PRECISION, DIMENSION(length) :: u0
  DOUBLE PRECISION, DIMENSION(length) :: u0b
  DOUBLE PRECISION, DIMENSION(length) :: v0
  DOUBLE PRECISION, DIMENSION(length) :: v0b
  DOUBLE PRECISION :: tempb9
  DOUBLE PRECISION :: tempb8
  DOUBLE PRECISION :: tempb7
  DOUBLE PRECISION :: tempb6
  DOUBLE PRECISION :: tempb5
  DOUBLE PRECISION :: tempb4
  DOUBLE PRECISION :: tempb19
  DOUBLE PRECISION :: tempb3
  DOUBLE PRECISION :: tempb18
  DOUBLE PRECISION :: tempb2
  DOUBLE PRECISION :: tempb17
  DOUBLE PRECISION :: tempb1
  DOUBLE PRECISION :: tempb16
  DOUBLE PRECISION :: tempb0
  DOUBLE PRECISION :: tempb15
  DOUBLE PRECISION :: tempb14
  DOUBLE PRECISION :: tempb13
  DOUBLE PRECISION :: tempb12
  DOUBLE PRECISION :: tempb11
  DOUBLE PRECISION :: tempb10
  DOUBLE PRECISION :: tempb44
  DOUBLE PRECISION :: tempb43
  DOUBLE PRECISION :: tempb42
  DOUBLE PRECISION :: tempb41
  DOUBLE PRECISION :: tempb40
  DOUBLE PRECISION :: tempb
  DOUBLE PRECISION :: tempb39
  DOUBLE PRECISION :: tempb38
  DOUBLE PRECISION :: tempb37
  DOUBLE PRECISION :: tempb36
  DOUBLE PRECISION :: tempb35
  DOUBLE PRECISION :: tempb34
  DOUBLE PRECISION :: tempb33
  DOUBLE PRECISION :: tempb32
  DOUBLE PRECISION :: tempb31
  DOUBLE PRECISION :: tempb30
  DOUBLE PRECISION :: tempb29
  DOUBLE PRECISION :: tempb28
  DOUBLE PRECISION :: tempb27
  DOUBLE PRECISION :: tempb26
  DOUBLE PRECISION :: tempb25
  DOUBLE PRECISION :: tempb24
  DOUBLE PRECISION :: tempb23
  DOUBLE PRECISION :: tempb22
  DOUBLE PRECISION :: tempb21
  DOUBLE PRECISION :: tempb20
  u0 = m0/phi0
  v0 = n0/phi0
  coeff1 = dt/(4.d0*dx)
  coeff2 = dt/(2.d0*dx)
  coeff3 = k*dt/dx**2
  tempb31 = -(coeff1*mb(length))
  tempb32 = g*(h(1)-h(length))*tempb31
  m0b = 0.D0
  phi0b = 0.D0
  tempb30 = coeff3*phib(length)
  phi0b(length) = phi0b(length) + phib(length) - 2.d0*tempb30
  m0b(1) = m0b(1) - coeff2*phib(length)
  m0b(length-1) = m0b(length-1) + coeff2*phib(length)
  phi0b(length-1) = phi0b(length-1) + tempb30
  phi0b(1) = phi0b(1) + 2*phi0(1)*tempb31 + tempb32 + tempb30
  n0b = 0.D0
  v0b = 0.D0
  tempb33 = -(coeff1*nb(length))
  tempb34 = (m0(1)+m0(length))*tempb33
  tempb35 = (v0(1)+v0(length))*tempb33
  tempb36 = -((m0(length)+m0(length-1))*tempb33)
  tempb37 = -((v0(length)+v0(length-1))*tempb33)
  tempb38 = coeff3*nb(length)
  n0b(length) = n0b(length) + nb(length) - 2.d0*tempb38
  v0b(1) = v0b(1) + tempb34
  v0b(length) = v0b(length) + tempb36 + tempb34
  m0b(1) = m0b(1) + tempb35
  m0b(length) = m0b(length) + tempb37 - dt*f*nb(length) + tempb35
  v0b(length-1) = v0b(length-1) + tempb36
  m0b(length-1) = m0b(length-1) + tempb37
  n0b(length-1) = n0b(length-1) + tempb38
  n0b(1) = n0b(1) + tempb38
  u0b = 0.D0
  tempb39 = (m0(1)+m0(length))*tempb31
  tempb40 = (u0(1)+u0(length))*tempb31
  tempb41 = -((m0(length)+m0(length-1))*tempb31)
  tempb42 = -((u0(length)+u0(length-1))*tempb31)
  tempb43 = g*(h(length)-h(length-1))*tempb31
  tempb44 = coeff3*mb(length)
  m0b(length) = m0b(length) + tempb42 - 2.d0*tempb44 + tempb40 + mb(&
&   length)
  u0b(1) = u0b(1) + tempb39
  u0b(length) = u0b(length) + tempb41 + tempb39
  m0b(1) = m0b(1) + tempb44 + tempb40
  u0b(length-1) = u0b(length-1) + tempb41
  m0b(length-1) = m0b(length-1) + tempb44 + tempb42
  phi0b(length) = phi0b(length) + tempb43 + tempb32
  phi0b(length-1) = phi0b(length-1) + tempb43 - 2*phi0(length-1)*tempb31
  n0b(length) = n0b(length) + dt*f*mb(length)
  DO j=length-1,2,-1
    tempb16 = -(coeff1*mb(j))
    tempb17 = g*(h(j+1)-h(j))*tempb16
    tempb15 = coeff3*phib(j)
    phi0b(j) = phi0b(j) + phib(j) - 2.d0*tempb15
    m0b(j+1) = m0b(j+1) - coeff2*phib(j)
    m0b(j-1) = m0b(j-1) + coeff2*phib(j)
    phi0b(j-1) = phi0b(j-1) + tempb15
    phi0b(j+1) = phi0b(j+1) + 2*phi0(j+1)*tempb16 + tempb17 + tempb15

    tempb18 = -(coeff1*nb(j))
    tempb19 = (m0(j+1)+m0(j))*tempb18
    tempb20 = (v0(j+1)+v0(j))*tempb18
    tempb21 = -((m0(j)+m0(j-1))*tempb18)
    tempb22 = -((v0(j)+v0(j-1))*tempb18)
    tempb23 = coeff3*nb(j)
    n0b(j) = n0b(j) + nb(j) - 2.d0*tempb23
    v0b(j+1) = v0b(j+1) + tempb19
    v0b(j) = v0b(j) + tempb21 + tempb19
    m0b(j+1) = m0b(j+1) + tempb20
    m0b(j) = m0b(j) + tempb22 - dt*f*nb(j) + tempb20
    v0b(j-1) = v0b(j-1) + tempb21
    m0b(j-1) = m0b(j-1) + tempb22
    n0b(j-1) = n0b(j-1) + tempb23
    n0b(j+1) = n0b(j+1) + tempb23

    tempb24 = (m0(j+1)+m0(j))*tempb16
    tempb25 = (u0(j+1)+u0(j))*tempb16
    tempb26 = -((m0(j)+m0(j-1))*tempb16)
    tempb27 = -((u0(j)+u0(j-1))*tempb16)
    tempb28 = g*(h(j)-h(j-1))*tempb16
    tempb29 = coeff3*mb(j)
    m0b(j) = m0b(j) + tempb27 - 2.d0*tempb29 + tempb25 + mb(j)
    u0b(j+1) = u0b(j+1) + tempb24
    u0b(j) = u0b(j) + tempb26 + tempb24
    m0b(j+1) = m0b(j+1) + tempb29 + tempb25
    u0b(j-1) = u0b(j-1) + tempb26
    m0b(j-1) = m0b(j-1) + tempb29 + tempb27
    phi0b(j) = phi0b(j) + tempb28 + tempb17
    phi0b(j-1) = phi0b(j-1) + tempb28 - 2*phi0(j-1)*tempb16
    n0b(j) = n0b(j) + dt*f*mb(j)

  END DO
  tempb0 = -(coeff1*mb(1))
  tempb12 = g*tempb0
  tempb1 = (h(2)-h(1))*tempb12
  tempb = coeff3*phib(1)
  phi0b(1) = phi0b(1) + phib(1) - 2.d0*tempb
  m0b(2) = m0b(2) - coeff2*phib(1)
  m0b(length) = m0b(length) + coeff2*phib(1)
  phi0b(length) = phi0b(length) + tempb
  phi0b(2) = phi0b(2) + 2*phi0(2)*tempb0 + tempb1 + tempb
  
  tempb2 = -(coeff1*nb(1))
  tempb3 = (m0(2)+m0(1))*tempb2
  tempb4 = (v0(2)+v0(1))*tempb2
  tempb5 = -((m0(1)+m0(length))*tempb2)
  tempb6 = -((v0(1)+v0(length))*tempb2)
  tempb7 = coeff3*nb(1)
  n0b(1) = n0b(1) + nb(1) - 2.d0*tempb7
  v0b(2) = v0b(2) + tempb3
  v0b(1) = v0b(1) + tempb5 + tempb3
  m0b(2) = m0b(2) + tempb4
  m0b(1) = m0b(1) + tempb6 - dt*f*nb(1) + tempb4
  v0b(length) = v0b(length) + tempb5
  m0b(length) = m0b(length) + tempb6
  n0b(length) = n0b(length) + tempb7
  n0b(2) = n0b(2) + tempb7

  tempb8 = (m0(2)+m0(1))*tempb0
  tempb9 = (u0(2)+u0(1))*tempb0
  tempb10 = -((m0(1)+m0(length))*tempb0)
  tempb11 = -((u0(1)+u0(length))*tempb0)
  tempb13 = (h(1)-h(length))*tempb12
  tempb14 = coeff3*mb(1)
  m0b(1) = m0b(1) + tempb11 - 2.d0*tempb14 + tempb9 + mb(1)
  u0b(2) = u0b(2) + tempb8
  u0b(1) = u0b(1) + tempb10 + tempb8
  m0b(2) = m0b(2) + tempb14 + tempb9
  u0b(length) = u0b(length) + tempb10
  m0b(length) = m0b(length) + tempb14 + tempb11
  phi0b(1) = phi0b(1) + tempb13 + tempb1
  phi0b(length) = phi0b(length) + tempb13 - 2*phi0(length)*tempb0
  n0b(1) = n0b(1) + dt*f*mb(1)

  n0b = n0b + v0b/phi0
  phi0b = phi0b - m0*u0b/phi0**2 - n0*v0b/phi0**2
  m0b = m0b + u0b/phi0
END SUBROUTINE FTCS_TOPOG_ADJ
