!        Generated by TAPENADE     (INRIA, Ecuador team)
!  Tapenade 3.11 (r5902M) - 15 Dec 2015 09:00
!
!  Differentiation of ftcs_flat in reverse (adjoint) mode:
!   gradient     of useful results: m n phi
!   with respect to varying inputs: m n m0 phi0 n0 phi
!   RW status of diff variables: m:in-out n:in-out m0:out phi0:out
!                n0:out phi:in-out
SUBROUTINE FTCS_FLAT_ADJ(m0, m0b, n0, n0b, phi0, phi0b, mb, nb, &
& phib, f, dx, dt, k, length)
  IMPLICIT NONE
  INTEGER, INTENT(IN) :: length
  DOUBLE PRECISION, DIMENSION(length), INTENT(IN) :: m0
  DOUBLE PRECISION, DIMENSION(length), intent(out) :: m0b
  DOUBLE PRECISION, DIMENSION(length), INTENT(IN) :: n0
  DOUBLE PRECISION, DIMENSION(length), intent(out) :: n0b
  DOUBLE PRECISION, DIMENSION(length), INTENT(IN) :: phi0
  DOUBLE PRECISION, DIMENSION(length), intent(out) :: phi0b
  DOUBLE PRECISION, DIMENSION(length), intent(in) :: mb
  DOUBLE PRECISION, DIMENSION(length), intent(in) :: nb
  DOUBLE PRECISION, DIMENSION(length), intent(in) :: phib
  DOUBLE PRECISION, INTENT(IN) :: f
  DOUBLE PRECISION, INTENT(IN) :: k
  DOUBLE PRECISION, INTENT(IN) :: dx
  DOUBLE PRECISION, INTENT(IN) :: dt
  INTEGER :: j
  DOUBLE PRECISION :: coeff1
  DOUBLE PRECISION :: coeff2
  DOUBLE PRECISION :: coeff3
  DOUBLE PRECISION, DIMENSION(length) :: u0
  DOUBLE PRECISION, DIMENSION(length) :: u0b
  DOUBLE PRECISION, DIMENSION(length) :: v0
  DOUBLE PRECISION, DIMENSION(length) :: v0b
  DOUBLE PRECISION :: tempb9
  DOUBLE PRECISION :: tempb8
  DOUBLE PRECISION :: tempb7
  DOUBLE PRECISION :: tempb6
  DOUBLE PRECISION :: tempb5
  DOUBLE PRECISION :: tempb4
  DOUBLE PRECISION :: tempb19
  DOUBLE PRECISION :: tempb3
  DOUBLE PRECISION :: tempb18
  DOUBLE PRECISION :: tempb2
  DOUBLE PRECISION :: tempb17
  DOUBLE PRECISION :: tempb1
  DOUBLE PRECISION :: tempb16
  DOUBLE PRECISION :: tempb0
  DOUBLE PRECISION :: tempb15
  DOUBLE PRECISION :: tempb14
  DOUBLE PRECISION :: tempb13
  DOUBLE PRECISION :: tempb12
  DOUBLE PRECISION :: tempb11
  DOUBLE PRECISION :: tempb10
  DOUBLE PRECISION :: tempb
  DOUBLE PRECISION :: tempb37
  DOUBLE PRECISION :: tempb36
  DOUBLE PRECISION :: tempb35
  DOUBLE PRECISION :: tempb34
  DOUBLE PRECISION :: tempb33
  DOUBLE PRECISION :: tempb32
  DOUBLE PRECISION :: tempb31
  DOUBLE PRECISION :: tempb30
  DOUBLE PRECISION :: tempb29
  DOUBLE PRECISION :: tempb28
  DOUBLE PRECISION :: tempb27
  DOUBLE PRECISION :: tempb26
  DOUBLE PRECISION :: tempb25
  DOUBLE PRECISION :: tempb24
  DOUBLE PRECISION :: tempb23
  DOUBLE PRECISION :: tempb22
  DOUBLE PRECISION :: tempb21
  DOUBLE PRECISION :: tempb20
  u0 = m0/phi0
  v0 = n0/phi0
  coeff1 = dt/(4.d0*dx)
  coeff2 = dt/(2.d0*dx)
  coeff3 = k*dt/dx**2
  tempb26 = -(coeff1*mb(length))
  m0b = 0.D0
  phi0b = 0.D0
  tempb25 = coeff3*phib(length)
  phi0b(length) = phi0b(length) + phib(length) - 2.d0*tempb25
  m0b(1) = m0b(1) - coeff2*phib(length)
  m0b(length-1) = m0b(length-1) + coeff2*phib(length)
  phi0b(length-1) = phi0b(length-1) + tempb25
  phi0b(1) = phi0b(1) + 2*phi0(1)*tempb26 + tempb25

  n0b = 0.D0
  v0b = 0.D0
  tempb27 = -(coeff1*nb(length))
  tempb28 = (m0(1)+m0(length))*tempb27
  tempb29 = (v0(1)+v0(length))*tempb27
  tempb30 = -((m0(length)+m0(length-1))*tempb27)
  tempb31 = -((v0(length)+v0(length-1))*tempb27)
  tempb32 = coeff3*nb(length)
  n0b(length) = n0b(length) + nb(length) - 2.d0*tempb32
  v0b(1) = v0b(1) + tempb28
  v0b(length) = v0b(length) + tempb30 + tempb28
  m0b(1) = m0b(1) + tempb29
  m0b(length) = m0b(length) + tempb31 - dt*f*nb(length) + tempb29
  v0b(length-1) = v0b(length-1) + tempb30
  m0b(length-1) = m0b(length-1) + tempb31
  n0b(length-1) = n0b(length-1) + tempb32
  n0b(1) = n0b(1) + tempb32

  u0b = 0.D0
  tempb33 = (m0(1)+m0(length))*tempb26
  tempb34 = (u0(1)+u0(length))*tempb26
  tempb35 = -((m0(length)+m0(length-1))*tempb26)
  tempb36 = -((u0(length)+u0(length-1))*tempb26)
  tempb37 = coeff3*mb(length)
  m0b(length) = m0b(length) + tempb36 - 2.d0*tempb37 + tempb34 + mb(&
&   length)
  u0b(1) = u0b(1) + tempb33
  u0b(length) = u0b(length) + tempb35 + tempb33
  m0b(1) = m0b(1) + tempb37 + tempb34
  u0b(length-1) = u0b(length-1) + tempb35
  m0b(length-1) = m0b(length-1) + tempb37 + tempb36
  phi0b(length-1) = phi0b(length-1) - 2*phi0(length-1)*tempb26
  n0b(length) = n0b(length) + dt*f*mb(length)

  DO j=length-1,2,-1
    tempb13 = -(coeff1*mb(j))
    tempb12 = coeff3*phib(j)
    phi0b(j) = phi0b(j) + phib(j) - 2.d0*tempb12
    m0b(j+1) = m0b(j+1) - coeff2*phib(j)
    m0b(j-1) = m0b(j-1) + coeff2*phib(j)
    phi0b(j-1) = phi0b(j-1) + tempb12
    phi0b(j+1) = phi0b(j+1) + 2*phi0(j+1)*tempb13 + tempb12

    tempb14 = -(coeff1*nb(j))
    tempb15 = (m0(j+1)+m0(j))*tempb14
    tempb16 = (v0(j+1)+v0(j))*tempb14
    tempb17 = -((m0(j)+m0(j-1))*tempb14)
    tempb18 = -((v0(j)+v0(j-1))*tempb14)
    tempb19 = coeff3*nb(j)
    n0b(j) = n0b(j) + nb(j) - 2.d0*tempb19
    v0b(j+1) = v0b(j+1) + tempb15
    v0b(j) = v0b(j) + tempb17 + tempb15
    m0b(j+1) = m0b(j+1) + tempb16
    m0b(j) = m0b(j) + tempb18 - dt*f*nb(j) + tempb16
    v0b(j-1) = v0b(j-1) + tempb17
    m0b(j-1) = m0b(j-1) + tempb18
    n0b(j-1) = n0b(j-1) + tempb19
    n0b(j+1) = n0b(j+1) + tempb19

    tempb20 = (m0(j+1)+m0(j))*tempb13
    tempb21 = (u0(j+1)+u0(j))*tempb13
    tempb22 = -((m0(j)+m0(j-1))*tempb13)
    tempb23 = -((u0(j)+u0(j-1))*tempb13)
    tempb24 = coeff3*mb(j)
    m0b(j) = m0b(j) + tempb23 - 2.d0*tempb24 + tempb21 + mb(j)
    u0b(j+1) = u0b(j+1) + tempb20
    u0b(j) = u0b(j) + tempb22 + tempb20
    m0b(j+1) = m0b(j+1) + tempb24 + tempb21
    u0b(j-1) = u0b(j-1) + tempb22
    m0b(j-1) = m0b(j-1) + tempb24 + tempb23
    phi0b(j-1) = phi0b(j-1) - 2*phi0(j-1)*tempb13
    n0b(j) = n0b(j) + dt*f*mb(j)

  END DO
  tempb0 = -(coeff1*mb(1))
  tempb = coeff3*phib(1)
  phi0b(1) = phi0b(1) + phib(1) - 2.d0*tempb
  m0b(2) = m0b(2) - coeff2*phib(1)
  m0b(length) = m0b(length) + coeff2*phib(1)
  phi0b(length) = phi0b(length) + tempb
  phi0b(2) = phi0b(2) + 2*phi0(2)*tempb0 + tempb

  tempb1 = -(coeff1*nb(1))
  tempb2 = (m0(2)+m0(1))*tempb1
  tempb3 = (v0(2)+v0(1))*tempb1
  tempb4 = -((m0(1)+m0(length))*tempb1)
  tempb5 = -((v0(1)+v0(length))*tempb1)
  tempb6 = coeff3*nb(1)
  n0b(1) = n0b(1) + nb(1) - 2.d0*tempb6
  v0b(2) = v0b(2) + tempb2
  v0b(1) = v0b(1) + tempb4 + tempb2
  m0b(2) = m0b(2) + tempb3
  m0b(1) = m0b(1) + tempb5 - dt*f*nb(1) + tempb3
  v0b(length) = v0b(length) + tempb4
  m0b(length) = m0b(length) + tempb5
  n0b(length) = n0b(length) + tempb6
  n0b(2) = n0b(2) + tempb6

  tempb7 = (m0(2)+m0(1))*tempb0
  tempb8 = (u0(2)+u0(1))*tempb0
  tempb9 = -((m0(1)+m0(length))*tempb0)
  tempb10 = -((u0(1)+u0(length))*tempb0)
  tempb11 = coeff3*mb(1)
  m0b(1) = m0b(1) + tempb10 - 2.d0*tempb11 + tempb8 + mb(1)
  u0b(2) = u0b(2) + tempb7
  u0b(1) = u0b(1) + tempb9 + tempb7
  m0b(2) = m0b(2) + tempb11 + tempb8
  u0b(length) = u0b(length) + tempb9
  m0b(length) = m0b(length) + tempb11 + tempb10
  phi0b(length) = phi0b(length) - 2*phi0(length)*tempb0
  n0b(1) = n0b(1) + dt*f*mb(1)

  n0b = n0b + v0b/phi0
  phi0b = phi0b - m0*u0b/phi0**2 - n0*v0b/phi0**2
  m0b = m0b + u0b/phi0
END SUBROUTINE FTCS_FLAT_ADJ
